# -*- coding: utf-8 -*-
"""transfer_learning_feature_extraction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yWtzoFR81YNPUoCXEe2mKYvdk_VpTrKR
"""

import tensorflow as tf
import tensorflow_hub as hub
import tf_keras
from tensorflow.keras import layers
import zipfile
import pandas as pd
import os
from tensorflow.keras.preprocessing.image import ImageDataGenerator as IDG
import datetime

!wget https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_10_percent.zip
zip_ref=zipfile.ZipFile("10_food_classes_10_percent.zip")
zip_ref.extractall()
zip_ref.close()

for path,names,filenames in os.walk("/content/10_food_classes_10_percent"):
  print(f" their are {len(names)} directories and {len(filenames)} images in {path}")

tf.random.set_seed(42)

# data augmented
train_datagen=IDG(rescale=1/255.)
                  # rotation_range=0.2,
                  # shear_range=0.2,
                  # zoom_range=0.2,
                  # width_shift_range=0.2,
                  # height_shift_range=0.3,
                  # horizontal_flip=True)


valid_datagen=IDG(rescale=1/255.)

train_dir='/content/10_food_classes_10_percent/train'
test_dir='/content/10_food_classes_10_percent/test'

train_data=train_datagen.flow_from_directory(directory=train_dir,
                                             batch_size=32,
                                             target_size=(224,224),
                                             class_mode="categorical",
                                             seed=42
                                             )

valid_data=valid_datagen.flow_from_directory(directory=test_dir,
                                             batch_size=32,
                                             target_size=(224,224),
                                             class_mode="categorical",
                                             seed=42
                                             )
#training less and testing more
# 47 batches of 32 images , 47*32=1500

def create_tensorboard(dir_name,exp_name):

  log_dir=dir_name+'/'+exp_name+'/'+datetime.datetime.now().strftime("%Y%m%d-%H%M%S")

  tensorboard_callback=tf_keras.callbacks.TensorBoard(log_dir)

  print(f"saving tensorboard log files to {log_dir}")

  return tensorboard_callback

resnet_url="https://kaggle.com/models/google/resnet-v2/TensorFlow2/50-feature-vector/1"
efficientnet_url="https://www.kaggle.com/models/tensorflow/efficientnet/TensorFlow2/b0-feature-vector/1"

def create_model(model_url, num_classes=10):

  # Download the pretrained model and save it as a Keras layer
  feature_extractor_layer = hub.KerasLayer(model_url,
                                           trainable=False, # freeze the underlying patterns
                                           name='feature_extraction_layer',
                                           input_shape=(224,224,3)) # define the input image shape

  # Create our own model
  model = tf_keras.Sequential([

    feature_extractor_layer, # use the feature extraction layer as the base
    tf_keras.layers.Dense(num_classes, activation='softmax', name='output_layer') # create our own output layer
  ])

  return model

resnet_model=create_model(resnet_url,train_data.num_classes)

resnet_model.summary()

resnet_model.compile(loss="categorical_crossentropy",
                     optimizer=tf_keras.optimizers.Adam(),
                     metrics=['accuracy'])

resnet_history=resnet_model.fit(train_data,
                 epochs=5,
                steps_per_epoch=len(train_data),
                validation_data=valid_data,
                validation_steps=len(valid_data),
                 callbacks=[create_tensorboard("tensorflow_hub",
                                               "resnet50V2")])

pd.DataFrame(resnet_history.history).plot()

effnet_model=create_model(efficientnet_url,train_data.num_classes)

effnet_model.summary()

effnet_model.compile(loss="categorical_crossentropy",
                     optimizer=tf_keras.optimizers.Adam(),
                     metrics=['accuracy'])

effnet_history=resnet_model.fit(train_data,
                 epochs=5,
                steps_per_epoch=len(train_data),
                validation_data=valid_data,
                validation_steps=len(valid_data),
                 callbacks=[create_tensorboard("tensorflow_hub",
                                               "effnetV2")])

pd.DataFrame(effnet_history.history).plot()

!tensorboard dev upload --logdir ./tensorflow_hub/ \
 --name "effnet vs resnet" \
 --description "comparing 2 feature extraction model" \
 --one_shot

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir ./tensorflow_hub/

